from pymongo import MongoClient
from pymongo.collection import Collection
from pymongo.uri_parser import parse_uri
import pymongo.errors as errors
from pymongo import IndexModel, ASCENDING, DESCENDING, TEXT, GEO2D, GEOHAYSTACK, GEOSPHERE

# Find the stack on which we want to store the database connection.
# Starting with Flask 0.9, the _app_ctx_stack is the correct one,
# before that we need to use the _request_ctx_stack.
try:
    from flask import _app_ctx_stack as stack
except ImportError:
    from flask import _request_ctx_stack as stack

class MongoDBClient(MongoClient):

    def __init__(self, app=None, host='localhost', port=27017, document_class=dict, tz_aware=False, connect=True, **kwargs):
        self.app = app
        self.uri = self.app.config['MONGO_URI'] 

        try:
            super(MongoDBClient, self).__init__(self.uri, document_class=dict, tz_aware=False, connect=True, **kwargs)
        except errors.ConnectionFailure:
            print("Server %s not available" % parse_uri(self.uri)['host'] )
        except errors.ConfigurationError:
            print("Configuration error connecting to the server %s" % parse_uri(self.uri)['host'])
        
        if app is not None:
            self.init_app(app)

    def init_app(self, app):
        app.config.setdefault('MONGO_URI', 'mongodb://localhost/flask')
        # Use the newstyle teardown_appcontext if it's available,
        # otherwise fall back to the request context
        if hasattr(app, 'teardown_appcontext'):
            app.teardown_appcontext(self.teardown)
        else:
            app.teardown_request(self.teardown)

    def connect(self):
        return self

    def teardown(self, exception):
        ctx = stack.top
        if hasattr(ctx, 'mongodb'):
            ctx.mongodb.close()

    @property
    def connection(self):
        ctx = stack.top
        if ctx is not None:
            if not hasattr(ctx, 'mongodb'):
                ctx.mongodb = self.connect()
            return ctx.mongodb